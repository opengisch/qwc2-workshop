#+title: QWC2 Workshop
#+REVEAL_HLEVEL: 1
#+REVEAL_INIT_OPTIONS: transition: 'cube'
#+REVEAL_THEME: black
#+STARTUP: inlineimages
#+OPTIONS: toc:nil
#+begin_export html
<style>
.reveal li {font-size: 60%;}
</style>
#+end_export

* Objectifs
Les objectifs de ce workshop sont :
- de connaître les principales fonctionnalités de QWC2
- être capable de créer une application web QWC2 simple
- préparer une infrastructure Docker pour servir l'application web
- configurer l'application web
- configurer et publier des projets QGIS
* Qu'est-ce que QWC2 ?
QWC2 est un client web pour le serveur QGIS.

[[./assets/images/simple.png]]

* Composants
** Map Components
    - ReactJS + Redux
    - OpenLayers
** Build Toolchain
    - nodejs
    - yarn
    - webpack
** Build
[[./assets/images/build.png]]
* Fonctionnalités
** Core modules
    - Navigateur de thème (projet)
    - Layer tree
    - Feature info
    - Recherche configurables
    - Outils de mesure
    - Fonctionnalité d'esquisse / redlining
    - Génération de liens permanents
    - Impression PDF
    - Exportation de captures d'écran / Raster
    - Importation WMS / WFS
    - Importation KML
    - Outil de comparaison de cartes
http://webgisdemo.opengis.ch:8811
** Fonctionnalités avec composants serveur (services REST)
    - Authentification
    - Gestion des utilisateurs
    - Recherche dans la base de données
    - Permalinks
    - Édition
    - Service Mapinfo (indépendant des couches)
    - Impression de légendes
    - Profils de hauteur
* Où le trouver ?
- https://github.com/qgis/qwc2 Ce repository contient les composants
  communs de l'application QWC2 à partir desquels vous
  pouvez construire votre propre application QWC2 personnelle.
- https://github.com/qgis/qwc2-demo-app Ce repository contient un
  exemple d'application QWC2 que vous pouvez utiliser comme base pour
  créer votre propre application.
- https://github.com/qwc-services Cette organisation Github contient
  les repository qui contiennent les composants serveur.
* Où trouver de l'aide ?
- https://github.com/qgis/qwc2-demo-app/blob/master/doc/QWC2_Documentation.md
  Documentation officielle
- https://github.com/qgis/qwc2-demo-app/issues Github issues
- https://lists.osgeo.org/mailman/listinfo/qgis-qwc2 Mailing list
- OPENGIS.ch
* Requirements
Environnement de développement minimal
  - git
  - node
  - yarn
* Partie pratique
Serveur cloud en ligne ou machine locale avec ligne de commande Linux et docker
** Préparation des machine Exoscale
Swiss Cloud provider, avec servers en CH, DE, AT, BG.
- Ubuntu 22.04 LTS (GVA)
- Small
- webserver and devservers groups
** Installation minimale de QWC2 (sans Docker)
#+begin_src sh
sudo bash
apt update
apt install nodejs npm unzip
npm install -g yarn
git clone --recursive https://github.com/qgis/qwc2-demo-app.git
cd qwc2-demo-app
yarn install
yarn start
#+end_src

Nous allons à l'adresse <IP ADDRESS>:8081

Conseil : désactivez le cache du navigateur

#+begin_src sh
yarn run prod
ls ./prod
#+end_src
** Conteneurisation à l'aide de Docker
Maintenant nous préparons un conteneur pour construire l'application
donc nous n'avons pas besoin de dépendances locales comme node etc. et
il est reproductible, nous utilisons docker-compose, de sorte que nous
pouvons ensuite ajouter les autres composants, un peu à la fois.

#+begin_src sh
apt install docker.io
apt install docker-compose
#+end_src

Nous créons docker-compose.yml dans le répertoire =/home/ubuntu/=

#+begin_src yaml
version: '3'

services:

  qwc2:
    image: node:18.10
    volumes:
      - ./qwc2-demo-app:/io/app
    command: >
      bash -c "cd /io/app &&
               yarn install &&
               yarn start"
    ports:
      - 8081:8081
#+end_src
** Webserver
Changeons-le maintenant car nous voulons seulement l'utiliser comme un
constructeur et ajouter un serveur web. Nous changeons donc la
dernière ligne de la 'commande' en =yarn run prod= et nous fermons les
ports...

Nous avons maintenant un processus qui génère l'application dont nous
avons besoin. Nous allons mettre un serveur web maintenant. Caddy.

https://caddyserver.com/
https://hub.docker.com/_/caddy

Nous modifions le docker-compose.yml en ajoutant le service caddy :
#+begin_src yaml
  caddy:
    image: caddy:2.6.2-alpine
    volumes:
      - ./qwc2-demo-app/prod:/usr/share/caddy
    ports:
      - 80:80
#+end_src
** QGIS server
Maintenant, nous voulons ajouter notre propre projet qgis et ne pas
simplement utiliser des wms directs via un serveur géographique
externe. Ajoutons donc un serveur QGIS pour publier nos projets.

Nous téléchargeons l'un des projets d'exemple de QField
https://docs.qfield.org/get-started/sample-projects/.
#+begin_src sh
mkdir qgis
curl -L -O https://docs.qfield.org/assets/projects/simple-bee-farming.zip
unzip simple-bee-farming.zip -d simple_bee_farming
#+end_src

Nous modifions le docker-compose.yml en ajoutant le service qgis-server :
#+begin_src yaml
  qgis-server:
    image: opengisch/qgis-server:3.28.0-jammy
    volumes:
      - ./qgis:/io/data
    expose:
      - 9993
    ports:
      - 8080:80
#+end_src

Nous pouvons essayer les requêtes du navigateur directement
http://<IP ADDRESS>:8080/ogc/simple_bee_farming?SERVICE=WMS&REQUEST=GetProjectSettings

** Proxy avec Caddy
Mais certaines choses comme getFeatureInfo ne fonctionnent pas parce
qu'elles sont sur des URL différentes, nous devons nous assurer que
tout passe par le même endroit, c'est-à-dire caddy, ce qui a aussi
l'avantage, si nous utilisons HTTPS, de configurer les certificats en
un seul endroit.

Caddyfile
#+begin_src
  194.182.160.95:80 {

  # Set this path to your site's directory.
  root * /usr/share/caddy

  # Enable the static file server.
  file_server

  log {
    level DEBUG
    output stdout
  }

  @ows {
    path_regexp map_file ^/ows/(.*)
  }

  # https://localhost/ows/bees?SERVICE=WMS&REQUEST=GetCapabilities
  # directly call QGIS via fcgi
  reverse_proxy @ows qgis-server:9993 {
    transport fastcgi {
      env QUERY_STRING {query}&map=/io/data/{http.regexp.map_file.1}/{http.regexp.map_file.1}.qgs
    }
  }
}
#+end_src

docker-compose.yml
#+begin_src yaml
  caddy:
    image: caddy:2.6.2-alpine
    volumes:
      - ./qwc2-demo-app/prod:/usr/share/caddy
      - ./Caddyfile:/etc/caddy/Caddyfile
    ports:
      - 80:80
#+end_src

Nous pouvons supprimer les ports de qgis-server et désactiver nginx
interne et utiliser seulement FastCGI.

FastCGI est une technique permettant la communication entre un serveur
HTTP et un logiciel indépendant, c'est une évolution de Common Gateway
Interface, abrégée en CGI, signifiant en anglais « Interface
passerelle commune ».
#+begin_src yaml
    expose:
      - 9993
    environment:
      SKIP_NGINX: "true"
#+end_src
* Configuration des thèmes et des projets
** Structure du répertoire demo app
 https://github.com/qgis/qwc2-demo-app/blob/master/doc/QWC2_Documentation.md#qwc2-configuration
** Configuration du thème simple_bee_farming
Nous devons ajouter l'URL où le serveur QGIS fournit le projet au
fichier themesConfig.json

#+begin_src js
{
    "themes":{
        "items": [
            {
                "url":"http://194.182.162.37/ows/simple_bee_farming",
                "default": true
            }
       ],
        "backgroundLayers": [
       ]
    }
}
#+end_src
** Préparation d'un projet QGIS simple
Nous préparons maintenant un projet simple dans QGIS avec crs 2056 et
au moins une couche avec des géométries enregistrées dans un gpkg.
Nous sauvegardons le projet en tant que QGS (et non QGZ).

Appelons le projet =simple_project= et téléchargeons-le sur le serveur
dans le répertoire =qgis/simple_project=.

Pour créer le répertoire, nous utilisons la commande mkdir.
Il peut être nécessaire de changer le propriétaire du répertoire.

#+begin_src sh
  mkdir qgis/simple_project
  chown ubuntu:ubuntu qgis/simple_project
#+end_src
** Projet QGIS et themesConfig.json
Certains paramètres du projet peuvent être configurés directement dans
le projet dans QGIS. D'autres, en revanche, doivent être configurés
dans le fichier =themesConfig.json=, qui contient des informations sur
les projets publiés dans le webgis.

QWC2 utilisera ces informations et celles provenant des requêtes
GetCapabilities adressées au serveur QGIS pour créer le fichier
=themes.json= qui sera ensuite utilisé par l'application javascript.

https://github.com/qgis/qwc2-demo-app/blob/master/doc/QWC2_Documentation.md#theme-configuration-qgis-projects-and-the-themesconfigjson-file

** Ajout de notre projet
Nous téléchargeons notre projet sur le serveur avec par exemple sftp
et l'ajoutons ensuite au fichier =themesConfig.json=.
#+begin_src js
{
    "themes":{
        "items": [
            {
                "url":"http://194.182.162.37/ows/simple_project",
                "default": true
            }
       ],
        "backgroundLayers": [
       ]
    }
}
#+end_src
** Basemaps
Les cartes de base sont configurées globalement dans le fichier
=themesConfig.json= et pour chaque projet (thème), il est possible de
définir celles à utiliser.
#+begin_src js
  {
      "themes":{
          "items": [
              {
                  "url":"http://194.182.162.37/ows/simple_project",
                  "mapCrs": "EPSG:2056",
                  "default": true,
                  "backgroundLayers": [
                      {
                          "name": "swisstopo-pk",
                          "visibility": false
                      }
                  ]
              }
          ],
          "backgroundLayers": [
              {
                  "type": "wmts",
                  "url": "https://wmts.geo.admin.ch/1.0.0/ch.swisstopo.pixelkarte-farbe/default/current/2056/{TileMatrix}/{TileCol}/{TileRow}.jpeg",
                  "title": "Swisstopo",
                  "name": "swisstopo-pk",
                  "tileMatrixPrefix": "",
                  "tileMatrixSet": "2056_27",
                  "originX": 2420000.0,
                  "originY": 1350000.0,
                  "projection:": "EPSG:2056",
                  "resolutions": [4000,3750,3500,3250,3000,2750,2500,2250,2000,1750,1500,1250,1000,750,650,500,250,100,50,20,10,5,2.5,2,1.5,1,0.5,0.25],
                  "tileSize": [256, 256],
                  "attribution": "Swisstopo",
                  "attributionUrl": "https://www.swisstopo.admin.ch/",
                  "thumbnail": "swisstopo_lk.png"
              }
          ]
      }
  }
#+end_src

Voici d'autres exemples de cartes de base qui peuvent être utilisées :

#+begin_src js
      "backgroundLayers": [
        {
          "type": "wmts",
          "url": "https://wmts.asit-asso.ch/wmts/1.0.0/asitvd.fond_gris/default/Default/0/2056/{TileMatrix}/{TileRow}/{TileCol}.png",
          "title": "ASIT Gris",
          "name": "asit-gr",
          "tileMatrixSet": "2056",
          "tileMatrixPrefix": "",
          "originX": 2420000.0,
          "originY": 1350000.0,
          "crs": "EPSG:2056",
          "resolutions": [4000.0,3750.0,3500.0,3250.0,3000.0,2750.0,2500.0,2250.0,2000.0,1750.0,1500.0,1250.0,1000.0,750.0,650.0,500.0,250.0,100.0,50.0,20.0,10.0,5.0,2.5,2.0,1.5,1.0,0.5,0.25,0.09999999999999999,0.049999999999999996],
          "tileSize": [256, 256],
          "thumbnail": "asit_gris.png"
        },
        {
          "type": "wmts",
          "url": "https://wmts.asit-asso.ch/wmts/1.0.0/asitvd.fond_couleur/default/Default/0/2056/{TileMatrix}/{TileRow}/{TileCol}.png",
          "title":"ASIT Couleur",
          "name":"asit-col",
          "tileMatrixSet": "2056",
          "tileMatrixPrefix": "",
          "originX": 2420000.0,
          "originY": 1350000.0,
          "crs": "EPSG:2056",
          "resolutions": [4000.0,3750.0,3500.0,3250.0,3000.0,2750.0,2500.0,2250.0,2000.0,1750.0,1500.0,1250.0,1000.0,750.0,650.0,500.0,250.0,100.0,50.0,20.0,10.0,5.0,2.5,2.0,1.5,1.0,0.5,0.25,0.09999999999999999,0.049999999999999996],
          "tileSize": [256, 256],
          "thumbnail":"asit_couleur.png"
        },
        {
          "type": "wmts",
          "url": "https://wmts.asit-asso.ch/wmts/1.0.0/asitvd.fond_cadastral/default/Default/0/2056/{TileMatrix}/{TileRow}/{TileCol}.png",
          "title":"ASIT Cadastral",
          "name":"asit-cad",
          "tileMatrixSet": "2056",
          "tileMatrixPrefix": "",
          "originX": 2420000.0,
          "originY": 1350000.0,
          "crs": "EPSG:2056",
          "resolutions": [4000.0,3750.0,3500.0,3250.0,3000.0,2750.0,2500.0,2250.0,2000.0,1750.0,1500.0,1250.0,1000.0,750.0,650.0,500.0,250.0,100.0,50.0,20.0,10.0,5.0,2.5,2.0,1.5,1.0,0.5,0.25,0.09999999999999999,0.049999999999999996],
          "tileSize": [256, 256],
          "thumbnail":"asit_cadastral.png"
        },
        {
          "type": "wmts",
          "url": "https://wmts.geo.admin.ch/1.0.0/ch.swisstopo.pixelkarte-farbe/default/current/2056/{TileMatrix}/{TileCol}/{TileRow}.jpeg",
          "title": "Swisstopo",
          "name": "swisstopo-pk",
          "tileMatrixPrefix": "",
          "tileMatrixSet": "2056_27",
          "originX": 2420000.0,
          "originY": 1350000.0,
          "projection:": "EPSG:2056",
          "resolutions": [4000,3750,3500,3250,3000,2750,2500,2250,2000,1750,1500,1250,1000,750,650,500,250,100,50,20,10,5,2.5,2,1.5,1,0.5,0.25],
          "tileSize": [256, 256],
          "attribution": "Swisstopo",
          "attributionUrl": "https://www.swisstopo.admin.ch/",
          "thumbnail": "swisstopo_lk.png"
        },
        {
          "type": "wmts",
          "url": "http://wmts.geo.admin.ch/1.0.0/ch.swisstopo.swissimage/default/current/2056/{TileMatrix}/{TileCol}/{TileRow}.jpeg",
          "title": "Swisstopo image",
          "name": "swisstopo-lb",
          "tileMatrixPrefix": "",
          "tileMatrixSet": "2056_28",
          "originX": 2420000.0,
          "originY": 1350000.0,
          "projection:": "EPSG:2056",
          "resolutions": [4000,3750,3500,3250,3000,2750,2500,2250,2000,1750,1500,1250,1000,750,650,500,250,100,50,20,10,5,2.5,2,1.5,1,0.5,0.25],
          "tileSize": [256, 256],
          "attribution": "Swisstopo",
          "attributionUrl": "https://www.swisstopo.admin.ch/",
          "thumbnail": "swisstopo_lb.png"
        }
      ]
#+end_src
** Search providers
Les "fournisseurs de recherche" sont configurés dans le fichier
js/SearchProviders.js et l'application de démonstration contient déjà
plusieurs exemples et de la documentation.

Nous ajoutons la possibilité d'utiliser les fournisseurs de recherche
'coordinates' et 'geoadmin' à notre projet.

#+begin_src js
"searchProviders": ["coordinates", "geoadmin"]
#+end_src

* Configuration de l'application
QWC2 a une structure modulaire basée sur des plugins. Chaque outil de
l'application est en fait un plugin. Dans le fichier
static/config.json, les plugins qui seront utilisés dans notre
application sont configurés. Ils sont divisés en 2 sections
différentes (mobile et desktop). Examinons-les ensemble et désactivons
le plugin des signets par exemple.


